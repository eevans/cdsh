#!/usr/bin/env python

# Copyright (c) 2016, Eric Evans <eevans@wikimedia.org>
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice,
#    this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are
# those of the authors and should not be interpreted as representing official
# policies, either expressed or implied, of the FreeBSD Project.


import os


DEFAULT_CONFIG = os.path.expanduser("~/.cdsh")


def hosts(config, cluster=None, datacenter=None, rack=None):
    for cfg in config:
        if not cluster or (cluster == cfg):
            for dc in config[cfg]:
                if not datacenter or (datacenter == dc):
                    for r in config[cfg][dc]:
                        if not rack or (rack == r):
                            for host in config[cfg][dc][r]:
                                yield host


def print_hosts(config, cluster=None, datacenter=None, rack=None):
    for host in hosts(config, cluster, datacenter, rack):
        print host


if __name__ == "__main__":
    import argparse
    import subprocess
    import sys
    try:
        import yaml
    except ImportError, e:
        sys.stderr.write("PyYAML module missing (hint: pip install pyyaml?)\n")
        sys.exit(1)

    parser = argparse.ArgumentParser(description="A dsh wrapper for Cassandra")
    parser.add_argument("-c", "--cluster", default="restbase",
                        help="cluster name")
    parser.add_argument("-d", "--data-center", help="data-center name")
    parser.add_argument("-r", "--rack", help="rack name")
    parser.add_argument("--config", default=DEFAULT_CONFIG,
                        help="yaml configuration file")
    parser.add_argument("-P", "--print-hosts", action="store_true",
                        help="output matching hosts (no command run)")
    parser.add_argument("-v", "--verbose", action="store_true",
                        help="give verbose out of execution process")
    parser.add_argument("args", nargs="*", help="arguments to dsh")

    if "--" in sys.argv:
        index = sys.argv.index("--")
        args = parser.parse_args(sys.argv[:index][1:])
        extra_args = args.args + sys.argv[index:][1:]
    else:
        args = parser.parse_args(sys.argv[1:])
        extra_args = args.args

    if args.rack and (not args.data_center):
        sys.stderr.write("Rack specified without specifying a datacenter\n")
        sys.exit(1)

    if args.data_center and (not args.cluster):
        sys.stderr.write("Datacenter specified without specifying a cluster\n")
        sys.exit(1)

    if args.print_hosts and len(extra_args):
        sys.stderr.write("Cannot combine remote-args and -P/--print-hosts\n")
        sys.exit(1)

    if not os.path.exists(args.config):
        sys.stderr.write("Configuration %s does not exist" % args.config)
        sys.exit(1)

    try:
        with open(args.config) as f:
            config = yaml.load(f.read())

            if args.print_hosts:
                print_hosts(config, args.cluster, args.data_center, args.rack)
                sys.exit(0)

            nodes = hosts(config, args.cluster, args.data_center, args.rack)
            command = ["dsh", "-M", "-m", ",".join(nodes)]
            if args.verbose:
                command.append("-v")
            command.append("--")
            subprocess.call(command + extra_args)
    except IOError, e:
        sys.stderr.write("%s\n" % e)
        sys.exit(1)
